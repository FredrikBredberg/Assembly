.include "m328pdef.inc"
.cseg
.org 0 
.def temperatur = r23 // rör ej

;---------------------------------------------------------------------------
;----------------------------------------------------------------------------

reset:	
	rcall timer_init
	rcall spi_master_init
	rcall LCD_init
	rcall tempterature_text
	rcall temp_lim
	rcall send_next_temp
	rcall button_init
	rcall minlim 
	rcall EEPROM_init
	rcall uart_init
	rjmp main_loop

;---------------------------------------------------------------------------
;----------------------------------------------------------------------------
timer_init:

	ldi r16, (1<<WGM01) | (1<<COM0A0)                  
    out TCCR0A, r16
    ldi r16, (1<<CS01) | (1<<CS00)
    out TCCR0B, r16

    ldi r25, 77
    out OCR0A, r18


ret

;---------------------------------------------------------------------------
;----------------------------------------------------------------------------

button_init:

	ldi r22, 0b00001111
	out DDRD, r22
	ldi r22,0b11100000
	out PORTD, r22


	ldi r22, 0b11111110
	out DDRB, r22

	ldi r22,0b00000001
	out PORTB, r22

	ldi r22, 0b0000000
	out DDRC, r22
	ldi r22, 0b11111111
	out PORTC, r22 
	ret

;---------------------------------------------------------------------------
;----------------------------------------------------------------------------

minlim:

	ldi XL, 20 // minsta gränsen
	ldi XH, 30 // högsta gränsen
	ret
;---------------------------------------------------------------------------
;----------------------------------------------------------------------------

spi_master_init:
	; SS, MOSI, MISO, SCK, RS pins outputs
	ldi r16, (1<<2) | (1<<3) | (1<<5) | (1 << 1)  | (0 << 4 ) | (1 << 6) 
	out DDRB, r16
	; enable, master, clock rate fck/16
	ldi r16, (1<<SPE) | (1<<MSTR) | (1<<SPR0)
	out SPCR, r16
	ret
;---------------------------------------------------------------------------
;----------------------------------------------------------------------------
LCD_init:
	cbi PORTB, 1
	ldi r16, 0x39 ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	ldi r16, 0x1D ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	ldi r16, 0x50 ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	ldi r16, 0x6C ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	ldi r16, 0x7C ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	ldi r16, 0x38 ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	
	ldi r16, 0x0F ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	ldi r16, 0x01 ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay

	ldi r16, 0x06 ; load char to send
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms ; 0.5s delay	
	ret
;---------------------------------------------------------------------------
;----------------------------------------------------------------------------
EEPROM_init:
	ldi r18, high(eeprom_data1) ; CHECK
	ldi r19, low(eeprom_data1);  CHECK 
	rcall EEPROM_read

	ldi r18, high(eeprom_data2) ; CHECK
	ldi r19, low(eeprom_data2);  CHECK
	rcall EEPROM_read_1; 

	ret

uart_init:

	ldi r22, 6	; 9600
	clr r21
	sts UBRR0H, r21
	sts UBRR0L, r22
	clr r22
	clr r21

	ldi r17, (1<<RXEN0)|(1<<TXEN0); enable UART recive and transmit 
	sts UCSR0B, r17;

	ldi r17, (1<<USBS0)|(3<<UCSZ00); declare fram format: 8 data, 2 stop bits
	sts UCSR0C, r17
	clr r17

	ret
EEPROM_read:

	sbic EECR, EEPE
	rjmp EEPROM_read
	out EEARH, r18
	out EEARL, r19
	sbi EECR, EERE
	in XL, EEDR
	ret

EEPROM_read_1:

	sbic EECR, EEPE
	rjmp EEPROM_read_1
	out EEARH, r18
	out EEARL, r19
	sbi EECR, EERE
	in XH, EEDR
	ret
;---------------------------------------------------------------------------
;----------------------------------------------------------------------------

EEPROM_write_1:
	ldi r18, high(eeprom_data1)
	ldi r19, low(eeprom_data1)
	sbic EECR, EEPE
	rjmp EEPROM_write_1
	out EEARH, r18 
	out EEARL, r19

	out EEDR, XL
	sbi EECR, EEMPE
	sbi EECR, EEPE
	ret

EEPROM_write_2:

	ldi r18, high(eeprom_data2)
	ldi r19, low(eeprom_data2)
	sbic EECR, EEPE
	rjmp EEPROM_write_2
	out EEARH, r18 
	out EEARL, r19

	out EEDR, XH
	sbi EECR, EEMPE
	sbi EECR, EEPE
	ret

;---------------------------------------------------------------------------
; main loop - gör huvudjobbet.
;------------------------------------------------ MAIN LOOOP ---------------
main_loop:

	rcall move_cursor
	rcall read_temp_sensor
	rcall convertASCII
	rcall print_cur_temp

	rcall move_cursor2
	rcall max_limit
	rcall convertASCII
	rcall print_max_temp

	rcall move_cursor3
	rcall min_limit
	rcall convertASCII
	rcall print_min_temp

	rcall move_cursor4
	rcall alarm_check
	rjmp main_loop
;---------------------------------------------------------------------------
;----------------------------------------------------------------------------

move_cursor:
	ldi r16, 0b10001101
	cbi PORTB, 1
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1

	ret

;---------------------------------------------------------------------------
;			Flyttar LCD-cursorn till stället där max-temp ska skrivas ut
;---------------------------------------------------------------------------
move_cursor2:
	ldi r16, 0b10010101
	cbi PORTB, 1
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1
	rcall delaymega
	ret
;---------------------------------------------------------------------------


;---------------------------------------------------------------------------
;			Flyttar LCD-cursorn till stället där min-temp ska skrivas ut
;---------------------------------------------------------------------------
move_cursor3:

	ldi r16, 0b10011101
	cbi PORTB, 1
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1
	ret
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

move_cursor4:

	ldi r16, 0b10101000
	cbi PORTB, 1
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	sbi PORTB, 1
	ret
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

max_limit:
	in r17, PIND
	in r19, PINB

	cpi XH, 10
	brsh max_limchanger1
	ldi XH, 10

	cpi XH, 70
	brlo max_limchanger2
	ldi XH, 70

	mov r20, XH

max_limchanger1:
	cpi XH, 70
	brlo max_limchanger2
	ldi XH, 70


max_limchanger2:
	sbrc r19, 0
	rjmp maxskip1
	inc XH
	rcall EEPROM_write_2

maxskip1:
	sbrc r17, 7
	rjmp maxskip2
	dec XH
	rcall EEPROM_write_2


maxskip2:

	mov r20, XH
	clr r24
	clr r18
	ret

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

min_limit:



	cpi XL, 10
	brsh min_limchanger1
	ldi XL, 10
	cpi XL, 70
	brlo min_limchanger2


	;ret

min_limchanger1:
	cpi XL, 70
	brlo min_limchanger2
	ldi XL, 70
min_limchanger2:
	in r17, PIND
	sbrc r17, 5
	rjmp minskip1
	inc XL
	rcall EEPROM_write_1


minskip1:
	in r19, PINC
	sbrc r19, 5
	rjmp minskip2
	dec XL
	rcall EEPROM_write_1

minskip2:
	mov r20, XL
	clr r24
	clr r18
	ret

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
alarm_check:
	cp r23, XL
	brlo lower_alarm
	cp r23, XH
	brsh upper_alarm


	cp r23, XL
	brsh turnoff_lower_alarm
	cp r23, XH
	brlo turnoff_upper_alarm

	ret

lower_alarm:	; GRÖN DIOD

	sbi DDRD, 2
	sbi PORTD, 2

	rcall uart_start
	rcall send_alarm_on
	rcall piezo1
	ret


turnoff_lower_alarm: ; GRÖN DIOD

	cbi DDRD, 2
	cbi PORTD, 2

	rcall send_alarm_off
	rcall turnpiezo1off

	ret
piezo1:
	clr r16
	ldi r16, 0b11111101
	out DDRD, r16

	clr r16
	ldi r16, (1<<WGM01)                
    out TCCR0A, r16
    ldi r16, (1<<CS01) | (1<<CS00)
    out TCCR0B, r16

    ldi r25, 255
    out OCR0A, r18

	ldi r18, 255
    out OCR0A, r18

    ldi r18, (1<<COM0A0) | (1<<WGM01)
    out TCCR0A, r18

	ret

turnpiezo1off:

	ldi r16, 0b00000000
	out DDRD, r16
	
	rjmp piezodone

piezodone:
	ret

piezo2:
	clr r16
	ldi r16, 0b11111011
	out DDRD, r16

	clr r16
	ldi r16, (1<<WGM01)                
    out TCCR0A, r16
    ldi r16, (1<<CS01) | (1<<CS00)
    out TCCR0B, r16

    ldi r25, 20
    out OCR0A, r18

	ldi r18, 20
    out OCR0A, r18

    ldi r18, (1<<COM0A0) | (1<<WGM01)
    out TCCR0A, r18

	pop r18
	pop r25

	ret

upper_alarm:

	sbi DDRD, 3
	sbi PORTD, 3  ; pd3 diod --röd
	
	rcall uart_start
	rcall send_alarm_on
	rcall piezo2


	ret

turnoff_upper_alarm: ; RÖD DIOD

	cbi DDRD, 3
	cbi PORTD, 3

	rcall send_alarm_off
	rcall turnpiezo1off

	rjmp piezodone
	
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
uart_start:
	ldi ZL, low(uart_string*2)
	ldi ZH, high(uart_string*2)
	rcall uart_send_str
	rcall delaymega

	ret
 read_temp_sensor:
 
	sbi PORTB, 6
	rcall delay500ms
	cbi PORTB, 6
	rcall spi_txrx
	rcall delay500ms
	mov r24, r16
	lsl r24
	rcall spi_txrx
	
	mov r18, r16

	lsl r18
	ROL r18
	andi r18, 0b00000001
	or r24, r18
	sbi PORTB,6

	mov r23, r24
	clr r18
	clr r24
	sbi PORTB,6

	clr r20
	mov r20, r23
	ret

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

convertASCII:
	
loop10s:
	
	cpi r20, 10 // 
	brlo loop1s
	inc r24
	subi r20, 10

	rjmp loop10s

loop1s: 
	cpi r20, 0
	breq doneconvert
	inc r18
	dec r20
	rjmp loop1s


doneconvert: 
	
	ret	

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
print_cur_temp:

	rcall print_two_digits
	ret

print_min_temp:
	
	rcall print_two_digits
	ret
print_max_temp:	

	rcall print_two_digits
	ret
;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

print_two_digits:
	subi r18, -48 // minsta talet
	subi r24, -48 // största talet
	mov r16, r24
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2
	mov r16, r18
	cbi PORTB, 2
	rcall spi_txrx
	sbi PORTB, 2

	ret

done:
	ret

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------
	
spi_txrx:
	out SPDR, r16

wait_txrx:
	in r16, SPSR
	sbrs r16, SPIF
	rjmp wait_txrx
	in r16, SPDR
	ret

	rjmp send_text

send_text:

	sbi PORTB, 1
	cbi PORTb, 2

	lpm r16, Z+
	cpi r16, 0
	breq done

	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms

	rjmp send_text

;---------------------------------------------------------------------------
;---------------------------------------------------------------------------

uart_send_str:
	lpm r16,Z+ 
	cpi r16, 0
	breq done
	rcall uart_send_char
	rjmp uart_send_str


uart_send_char:
	lds r18, UCSR0A
	sbrs r18, UDRE0
	rjmp uart_send_char
	sts UDR0, r16 
	ret


tempterature_text:

	ldi ZL, low(mystring*2)
	ldi ZH, high(mystring*2)

	sbi PORTB, 1
	cbi PORTb, 2

	lpm r16, Z+
	cpi r16, 0
	breq done

	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms

	rjmp send_text

send_next_temp:
	ldi ZL, low(temp_string*2)
	ldi ZH, high(temp_string*2)
	sbi PORTB, 1
	cbi PORTb, 2

	lpm r16, Z+
	cpi r16, 0
	breq done

	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms

	rjmp send_text

temp_lim:
	ldi ZL, low(temp_limits*2)
	ldi ZH, high(temp_limits*2)
	sbi PORTB, 1
	cbi PORTb, 2

	lpm r16, Z+
	cpi r16, 0
	breq done

	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms

	rjmp send_text

send_alarm_on:
	ldi ZL, low(alarm_on*2)
	ldi ZH, high(alarm_on*2)
	sbi PORTB, 1
	cbi PORTb, 2

	lpm r16, Z+
	cpi r16, 0
	breq done1

	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms

	rjmp send_text

done1:
ret	

send_alarm_off:
	ldi ZL, low(alarm_off*2)
	ldi ZH, high(alarm_off*2)
	sbi PORTB, 1
	cbi PORTb, 2

	lpm r16, Z+
	cpi r16, 0
	breq donesend

	rcall spi_txrx
	sbi PORTB, 2
	rcall delay500ms

	rjmp send_text
stop:
	rjmp stop

donesend: 
	ret

delay500ms:	
	push r23
	push r21
	push r22	; 			
	ldi		r23, 255
	ldi		r21, 1
	ldi		r22, 1
delay500ms1:
	dec		r23
	brne	delay500ms1
delay500ms2:
	dec		r21
	ldi		r23, 255
	brne	delay500ms1
delay500ms3:
	dec		r22
	ldi		r21, 255
	brne	delay500ms1

	pop r22
	pop r21
	pop r23
	ret	

delaymega:
	push r23
	push r21
	push r22		; 			
	ldi		r23, 255
	ldi		r21, 1
	ldi		r22, 5
delaymega1:
	dec		r23
	brne	delaymega1
ddelaymega2:
	dec		r21
	ldi		r23, 255
	brne	delaymega1
delaymega3:
	dec		r22
	ldi		r21, 255
	brne	delaymega1
	pop r22
	pop r21
	pop r23
	ret	

mystring : 
.db "Temperature:",  0


temp_limits:
.db "    max:    min:   ",0

temp_string:
.db "    Alarm: ", 0

alarm_on:
.db ": ON    ", 0 

alarm_off:
.db ": OFF  ", 0

uart_string:
.db " LARMET GÅR" , 0 

.dseg
.org SRAM_START
mystring2: .byte 12
Temperature2: .byte 2
temp_string2: .byte 12
temp_limits2: .byte 12
alarm_on2: .byte 2
alarm_off2: .byte 2
uart_string2: .byte 2

.eseg
eeprom_data1: .db 'E'
eeprom_data2: .db 'B'
